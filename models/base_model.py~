#!/usr/bin/python3
""" Base model module """

import uuid
import datetime
import models

class BaseModel:
    """ Base model Class """
    def __init__(self, *args, **kwargs):
        """ special __init__ method """
        if kwargs is not None and kwargs != {}:
            for key in kwargs.keys():
                if key != "__class__":
                    self.__dict__[key] = kwargs[key]
            self.created_at = datetime.datetime.fromisoformat(self.__dict__["created_at"])
            self.updated_at = datetime.datetime.fromisoformat(self.__dict__["updated_at"])
        else:
            self.id = str(uuid.uuid4())
            self.created_at = datetime.datetime.now()
            self.updated_at = datetime.datetime.now()
            models.storage.new(self)

    def __str__(self):
        """ special __str__ method """
        return f"[{type(self).__name__}] ({self.id}) {self.__dict__}"

    def save(self):
        """
            updates the public instance attribute
            updated_at with the current datetime
        """
        self.updated_at = datetime.datetime.now()
        models.storage.save()

    def to_dict(self):
        """
            returns a dictionary containing all
            keys/values of __dict__ of the instance
        """
        tmp = self.__dict__.copy()
        tmp['__class__'] = type(self).__name__
        tmp["created_at"] = datetime.datetime.isoformat(self.created_at)
        tmp["updated_at"] = datetime.datetime.isoformat(self.updated_at)
        return tmp
